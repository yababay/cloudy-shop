import YDB from 'ydb-sdk'
import { YC } from './src/lib/yc.js'
import { Telegram, Context, Markup } from 'telegraf'
import { Update, UserFromGetMe } from 'telegraf/types'
import { Deunionize } from 'telegraf/typings/core/helpers/deunionize.js'
import { getDriver } from './src/lib/server/db/driver-cjs.js'
import { getCodes, getUnfilled, lackOfCodes } from './src/lib/server/db/fulfill.js'
import { getYDBTimestamp, intFromItem, intFromRows, isEmpty, rowsFromResultSets, stringFromItem, stringsFromQuery } from './src/lib/server/db/util.js'

const { TELEGRAM_BOT_TOKEN, TELEGRAM_CHANNEL } = process.env

const TG = new Telegram(TELEGRAM_BOT_TOKEN || '')

const BOT_INFO: UserFromGetMe = {
    is_bot: true, username: 'activation_service_bot',
    can_join_groups: false,
    can_read_all_group_messages: false,
    supports_inline_queries: true,
    id: 0,
    first_name: 'Activation Service Bot'
}

export async function handler (event: YC.CloudFunctionsHttpEvent, context: YC.CloudFunctionsHttpContext) {

    let payload: string | Deunionize<Update> = context.getPayload()
    if(typeof payload === 'string') payload = JSON.parse(payload) as  Deunionize<Update>

    console.log(`telegram is received: ${JSON.stringify(payload)}`)

    const ctx = new Context(payload, TG, BOT_INFO)

    const { text } = ctx
    const data = ctx.callbackQuery?.['data']

    const driver = await getDriver()

    
    await driver.tableClient.withSession(async (session) => {


        if(data) {
            const message = await lackOfCodes(session, data)
            return await ctx.reply(message, {parse_mode: 'HTML'})
        }


        if(text.startsWith('/delete')){
            const [ _, code] = text.split(/\s+/)
            if(!code) return await ctx.reply(`ü§î –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∫–æ–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è‚Ä¶`)
            const query = `delete from codes where code = '${code}' where order_id is null`
            console.log(query)
            await session.executeQuery(query)
            const rows = await getCodes(session)
            return ctx.reply(rows.join('\n\n'), {parse_mode: 'HTML'})
        }

        switch(text) {

            case '/start':
                return await ctx.reply('ü§ñ –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –∑–∞–ø–æ–ª–Ω—è—Ç—å –∫–æ–¥—ã –¥–ª—è —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∫–æ–º–ø–∞–Ω–∏–∏ Activation Service.\n\n–í–≤–µ–¥–∏—Ç–µ `/`, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.', {parse_mode: 'Markdown'})
                
            case '/help':
                return await ctx.reply('üìñ –ü–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–∞–º–∏ (`/check`, `/codes` –∏ –¥—Ä.) –∏–ª–∏ –≤–≤–æ–¥–∏—Ç–µ –∫–æ–¥—ã –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ—Å—Ç—Ä–æ—á–Ω–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä `APPLE500 qwerty12345`.', {parse_mode: 'Markdown'})

            case '/codes':
                const rows = await getCodes(session)
                if(!rows.length) return await ctx.reply(`ü§î –ö–æ–¥—ã –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã‚Ä¶`)
                return await ctx.reply(rows.join('\n\n'), {parse_mode: 'HTML'})

            case '/check':
                const ids = await getUnfilled(session)
                if(!ids.length) return await ctx.reply('üéâ –ù–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.')
                if(ids.length === 1){
                    const [ id ] = ids
                    const message = await lackOfCodes(session, id)
                    return await ctx.reply(message, {parse_mode: 'HTML'})
                }
                else return await ctx.reply(`‚è±Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–¥–æ–≤ –¥–ª—è ${ids.length === 1 ? '–∑–∞–∫–∞–∑–∞' : '–∑–∞–∫–∞–∑–æ–≤'}:`, Markup.inlineKeyboard(
                    ids.map(id => [`‚Ññ ${id}`, id + '']).map(([title, num]) => Markup.button.callback(title, num))
                ))

            default:

                const offers = await stringsFromQuery(session, `select id from offers`)

                let codes = text.trim()
                    .split(/[\r\n]+/)
                    .map(row => row.split(/\s+/))
                
                let count = codes.length

                codes = codes
                    .filter(arr => arr.length === 2 &&  offers.includes(arr[0]))

                if(!codes.length) return await ctx.reply('ü§î –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∫–æ–¥—ã –≤ —Ç–µ–∫—Å—Ç–µ.')

                let success = 0
                
                for(const [offer, code] of codes) {
                    if(!isEmpty(await session.executeQuery(`select code from codes where code = '${code}'`))) continue
                    await session.executeQuery(`insert into codes (offer_id, code, created_at) values ('${offer}', '${code}', ${getYDBTimestamp()})`)
                    success++
                }

                const message = success === count ? `üéâ –í—Å–µ —Å—Ç—Ä–æ–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.` : `ü§î –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${success} —Å—Ç—Ä–æ–∫ –∏–∑ ${count}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è. –ö–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–æ–≤–∞—Ä–∞ (SKU) –∏ –∫–æ–¥ –∞–∫—Ç–∏–≤–∏–∑–∞—Ü–∏–∏, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª–æ–º. –í–æ–∑–º–æ–∂–Ω–æ, –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–¥—ã –±—ã–ª–∏ —Ä–∞–Ω–µ–µ –≤–Ω–µ—Å–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.`
                await ctx.reply(message)
        }
    })

    await driver.destroy()

    return {
        statusCode: 200,
        body: JSON.stringify({ status: "ok" }),
        'headers': {
            'Content-Type': 'application/json',
        },
        isBase64Encoded: false
    }
}

/*
{
    "update_id":949119052,
    "message":{
        "message_id":79,
        "from":{"id":43962820,"is_bot":false,"first_name":"–ú–∏—Ö–∞–∏–ª","last_name":"–ë–µ–ª—è–∫–æ–≤","username":"yababay","language_code":"ru"},
        "chat":{"id":43962820,"first_name":"–ú–∏—Ö–∞–∏–ª","last_name":"–ë–µ–ª—è–∫–æ–≤","username":"yababay","type":"private"},
        "date":1759758271,"text":
        "/start",
        "entities":[{"offset":0,"length":6,"type":"bot_command"}]
    }
}
const OPTIONS = {
    parse_mode: 'Markdown',
    reply_markup: {
        keyboard: [
        [["Option 1"],
        ["Option 2"]]
        ],
        resize_keyboard: true
    }
}

*/



