import YDB from 'ydb-sdk'
import { YC } from './src/lib/yc.js'
import { Telegram, Context, Markup } from 'telegraf'
import { Update, UserFromGetMe } from 'telegraf/types'
import { Deunionize } from 'telegraf/typings/core/helpers/deunionize.js'
import { getDriver } from './src/lib/server/db/driver-cjs.js'
import { getCodes, getUnclosed, lackOfCodes } from './src/lib/server/db/fulfill.js'
import { getYDBTimestamp, intFromItem, intFromRows, isEmpty, rowsFromResultSets, stringFromItem, stringsFromQuery } from './src/lib/server/db/util.js'
import { getFullfilled, prepareAndSendItems } from './src/lib/server/db/delivery.js'

const { TELEGRAM_BOT_TOKEN, TELEGRAM_CHANNEL } = process.env

const TG = new Telegram(TELEGRAM_BOT_TOKEN || '')

const BOT_INFO: UserFromGetMe = {
    is_bot: true, username: 'activation_service_bot',
    can_join_groups: false,
    can_read_all_group_messages: false,
    supports_inline_queries: true,
    id: 0,
    first_name: 'Activation Service Bot'
}

export async function handler (event: YC.CloudFunctionsHttpEvent, context: YC.CloudFunctionsHttpContext) {

    let payload: string | Deunionize<Update> = context.getPayload()
    if(typeof payload === 'string') payload = JSON.parse(payload) as  Deunionize<Update>

    console.log(`telegram is received: ${JSON.stringify(payload)}`)

    const ctx = new Context(payload, TG, BOT_INFO)

    const { text, message, callbackQuery } = ctx
    const data = ctx.callbackQuery?.['data']
    const { from } = message || callbackQuery

    const driver = await getDriver()

    
    await driver.tableClient.withSession(async (session) => {


        if(data) {
            const [ _, action, orderId ] = /^([a-z]+)_(\d+)$/.exec(data) || []
            let message: string

            switch(action){
                case 'no':
                    return await ctx.reply(`‚è±Ô∏è –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–∫–∞–∑–∞ ${orderId} –æ—Ç–ª–æ–∂–µ–Ω–∞.`)
                case 'uf':
                    message = await lackOfCodes(session, data)
                    return await ctx.reply(message, {parse_mode: 'HTML'})
                case 'ff':
                    const items = await getFullfilled(session, orderId)
                    message = items.reduce((acc, item) => {
                        const { id, code, offerId } = item
                        return acc + `‚úÖ ${offerId} <code>${code}</code> (${id})\n\n` 
                    }, `–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞ ‚Ññ ${orderId}:\n\n`)
                    return await ctx.reply(message, {parse_mode: 'HTML', ...Markup.inlineKeyboard([
                        [
                            Markup.button.callback('üì§ –æ—Ç—Ä–∞–≤–∏—Ç—å', `go_${orderId}`),
                            Markup.button.callback('üõë –Ω–µ –æ—Ç—Ä–∞–≤–ª—è—Ç—å', `no_${orderId}`),
                        ]
                    ])})
                default:
                    return await ctx.reply(`ü§î –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞‚Ä¶`)
            }
        }


        if(text.startsWith('/remove')){
            const [ _, code] = text.split(/\s+/)
            if(!code) return await ctx.reply(`ü§î –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∫–æ–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è‚Ä¶`)
            const query = `delete from codes where code = '${code}' where order_id is null`
            console.log(query)
            await session.executeQuery(query)
            const rows = await getCodes(session)
            return ctx.reply(rows.join('\n\n'), {parse_mode: 'HTML'})
        }

        switch(text) {

            case '/start':
                return await ctx.reply('ü§ñ –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –∑–∞–ø–æ–ª–Ω—è—Ç—å –∫–æ–¥—ã –¥–ª—è —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∫–æ–º–ø–∞–Ω–∏–∏ Activation Service.\n\n–í–≤–µ–¥–∏—Ç–µ `/`, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.', {parse_mode: 'Markdown'})
                
            case '/help':
                return await ctx.reply('üìñ –ü–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–∞–º–∏ –º–µ–Ω—é (`/check`, `/codes` –∏ –¥—Ä.) –∏–ª–∏ –≤–≤–æ–¥–∏—Ç–µ –∫–æ–¥—ã –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ—Å—Ç—Ä–æ—á–Ω–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä `APPLE500 qwerty12345`.', {parse_mode: 'Markdown'})

            case '/codes':
                const rows = await getCodes(session)
                if(!rows.length) return await ctx.reply(`ü§î –ö–æ–¥—ã –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã‚Ä¶`)
                return await ctx.reply(rows.join('\n\n'), {parse_mode: 'HTML'})

            case '/send':
                const unclosed = await getUnclosed(session, true)
                if(!unclosed.length) return await ctx.reply(`ü§î –ù–æ–≤—ã—Ö –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ‚Ä¶`)
                for(const id of unclosed){
                    const chatUrl = await prepareAndSendItems(session, id)
                    let message = `üì® –ó–∞–∫–∞–∑ ‚Ññ ${id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–∞—Ä–∫–µ—Ç—É.`
                    if(chatUrl) message += ` –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–¥—ã [–≤ —á–∞—Ç–µ](${chatUrl})`
                    await ctx.reply(message, {parse_mode: 'Markdown'})
                    await session.executeQuery(`update ordered_items set fulfilled_at = ${getYDBTimestamp()} where order_id = ${id}`)
                }
                return

            case '/deliver':
            case '/delivery':
                const fulfilled = await getUnclosed(session, true)
                if(!fulfilled.length) return await ctx.reply('üì≠ –ó–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∏ –Ω–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.')
                return await ctx.reply(`üì¨ ${fulfilled.length === 1 ? '–ù–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑' : '–ù–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã'}:`, Markup.inlineKeyboard(
                    fulfilled.map(id => [`‚Ññ ${id}`, `ff_${id}`]).map(([title, num]) => Markup.button.callback(title, num))
                ))
    
            case '/check':
                const ids = await getUnclosed(session)
                if(!ids.length) return await ctx.reply('üéâ –ù–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.')
                if(ids.length === 1){
                    const [ id ] = ids
                    const message = await lackOfCodes(session, id)
                    return await ctx.reply(message, {parse_mode: 'HTML'})
                }
                else return await ctx.reply(`‚è±Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–¥–æ–≤ –¥–ª—è ${ids.length === 1 ? '–∑–∞–∫–∞–∑–∞' : '–∑–∞–∫–∞–∑–æ–≤'}:`, Markup.inlineKeyboard(
                    ids.map(id => [`‚Ññ ${id}`, `uf_${id}`]).map(([title, num]) => Markup.button.callback(title, num))
                ))

            default:

                const offers = await stringsFromQuery(session, `select id from offers`)

                let codes = text.trim()
                    .split(/[\r\n]+/)
                    .map(row => row.split(/\s+/))
                
                let count = codes.length

                codes = codes
                    .filter(arr => arr.length === 2 &&  offers.includes(arr[0]))

                if(!codes.length) return await ctx.reply(`ü§î –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ –∫–æ–¥—ã –≤ —Ç–µ–∫—Å—Ç–µ (<code>${text.slice(0, 20)}</code>).`, {parse_mode: 'HTML'})

                let success = 0
                
                for(const [offer, code] of codes) {
                    if(!isEmpty(await session.executeQuery(`select code from codes where code = '${code}'`))) continue
                    await session.executeQuery(`insert into codes (offer_id, code, created_at, user) values ('${offer}', '${code}', ${getYDBTimestamp()}, ${from.id})`)
                    success++
                }

                const message = success === count ? `üéâ –í—Å–µ —Å—Ç—Ä–æ–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.` : `ü§î –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${success} —Å—Ç—Ä–æ–∫ –∏–∑ ${count}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è. –ö–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–æ–≤–∞—Ä–∞ (SKU) –∏ –∫–æ–¥ –∞–∫—Ç–∏–≤–∏–∑–∞—Ü–∏–∏, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª–æ–º. –í–æ–∑–º–æ–∂–Ω–æ, –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–¥—ã –±—ã–ª–∏ —Ä–∞–Ω–µ–µ –≤–Ω–µ—Å–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.`
                await ctx.reply(message)
        }
    })

    await driver.destroy()

    return {
        statusCode: 200,
        body: JSON.stringify({ status: "ok" }),
        'headers': {
            'Content-Type': 'application/json',
        },
        isBase64Encoded: false
    }
}
