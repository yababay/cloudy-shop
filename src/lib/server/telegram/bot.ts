import { Telegram, Context, Markup } from 'telegraf'
import type { YC } from '../../yc.js'
import type { UserFromGetMe } from 'telegraf/types'
import { findUnfulfilled, getCodes, lackOfCodes } from '../queries/bot.js'
import { getDriver } from '../ydb/driver.js'
import { getYDBTimestamp, isEmpty, stringsFromQuery } from '../ydb/util.js'
import { deliverAll } from '../queries/delivery.js'

const { TELEGRAM_BOT_TOKEN, TELEGRAM_CHANNEL } = process.env

const TG = new Telegram(TELEGRAM_BOT_TOKEN || '')

const BOT_INFO: UserFromGetMe = {
    is_bot: true, username: 'activation_service_bot',
    can_join_groups: false,
    can_read_all_group_messages: false,
    supports_inline_queries: true,
    id: 0,
    first_name: 'Activation Service Bot'
}

const reply = {
    statusCode: 200,
    body: JSON.stringify({ status: "ok" }),
    'headers': {
        'Content-Type': 'application/json',
    },
    isBase64Encoded: false
}

export const telegram = async (event: YC.CloudFunctionsHttpEvent, context: YC.CloudFunctionsHttpContext) => {
    let payload: string = context.getPayload()
    if(typeof payload === 'string') payload = JSON.parse(payload)
    const ctx = Reflect.construct(Context, [payload, TG, BOT_INFO]) as Context
    const { text, message, callbackQuery } = ctx
    const data = Reflect.get(callbackQuery || {}, 'data') as string | undefined
    const { from } = message || callbackQuery || {}
    const userId = from?.id
    if(typeof userId !== 'number') throw 'no user id in telegram'

    if(data) {
        const [ _, action, orderId ] = /^([a-z]+)_(\d+)$/.exec(data) || []

        const driver = await getDriver()

        await driver.tableClient.withSession(async (session) => {

            switch(action){
                case 'deliver':
                    await deliverAll(session, true)
                    break
                case 'cancel':
                    await ctx.reply(`‚è±Ô∏è –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –æ—Ç–ª–æ–∂–µ–Ω–∞.`)
                    break
                case 'uf':
                    await lackOfCodes(session, orderId, ctx)
                    break
                default:
                    await ctx.reply(`ü§î –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞‚Ä¶`)
            }
        })

        await driver.destroy()
        return reply
    }

    if(typeof text !== 'string') throw 'no text in telegram'
        
    if(text.startsWith('/remove')){
        const [ _, code] = text.split(/\s+/)
        if(!code) return await ctx.reply(`ü§î –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∫–æ–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è‚Ä¶`)
        const driver = await getDriver()
        const codes = await driver.tableClient.withSession(async (session) => {
            await session.executeQuery(`delete from codes where code = '${code}' where order_id is null`)
            return await getCodes(session)
        })
        ctx.reply(codes, {parse_mode: 'HTML'})
        await driver.destroy()
        return reply
    }

    if(text === '/start') {
        await ctx.reply('ü§ñ –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –∑–∞–ø–æ–ª–Ω—è—Ç—å –∫–æ–¥—ã –¥–ª—è —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∫–æ–º–ø–∞–Ω–∏–∏ Activation Service.\n\n–í–≤–µ–¥–∏—Ç–µ `/`, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.', {parse_mode: 'Markdown'})
        return reply
    }
        
    if(text === '/help') {
        await ctx.reply('üìñ –ü–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–∞–º–∏ –º–µ–Ω—é (`/check`, `/codes` –∏ –¥—Ä.) –∏–ª–∏ –≤–≤–æ–¥–∏—Ç–µ –∫–æ–¥—ã –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ—Å—Ç—Ä–æ—á–Ω–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä\n\n `APPLE500 qwerty12345`\n`APPLE550 asdfgh67890`.', {parse_mode: 'Markdown'})
        return reply
    }

    const driver = await getDriver()
    await driver.tableClient.withSession(async (session) => {

        switch(text) {

            case '/codes':
                ctx.reply(await getCodes(session), {parse_mode: 'HTML'})
                break

            case '/check':
                await findUnfulfilled(session, ctx)
                break

            case '/deliver':
            case '/delivery':
                await ctx.reply('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã?', {parse_mode: 'HTML', ...Markup.inlineKeyboard([
                    [
                        Markup.button.callback('üì§ –æ—Ç—Ä–∞–≤–∏—Ç—å', `deliver`),
                        Markup.button.callback('üõë –Ω–µ –æ—Ç—Ä–∞–≤–ª—è—Ç—å', `cancel`),
                    ]
                ])})
                break
    
            default:

                const offers = await stringsFromQuery(session, `select id from offers`)

                let codes = text.trim()
                    .split(/[\r\n]+/)
                    .map(row => row.split(/\s+/))
                
                let { length } = codes

                codes = codes.filter(arr => arr.length === 2 &&  offers.includes(arr[0]))

                
                let success = 0
                
                for(const [offer, code] of codes) {
                    if(!isEmpty(await session.executeQuery(`select code from codes where code = '${code}'`))) continue
                    await session.executeQuery(`insert into codes (offer_id, code, created_at, user) values ('${offer}', '${code}', ${getYDBTimestamp()}, ${userId})`)
                    success++
                }
                
                if(!length) await ctx.reply(`ü§î –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ –∫–æ–¥—ã –≤ —Ç–µ–∫—Å—Ç–µ (<code>${text.slice(0, 20)}</code>).`, {parse_mode: 'HTML'})
                else if(success !== length) {
                    const message = `ü§î –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${success} —Å—Ç—Ä–æ–∫ –∏–∑ ${length}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è. –ö–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–æ–≤–∞—Ä–∞ (SKU) –∏ –∫–æ–¥ –∞–∫—Ç–∏–≤–∏–∑–∞—Ü–∏–∏, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª–æ–º. –í–æ–∑–º–æ–∂–Ω–æ, –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–¥—ã –±—ã–ª–∏ —Ä–∞–Ω–µ–µ –≤–Ω–µ—Å–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.`
                    await ctx.reply(message)
                }
                else await findUnfulfilled(session, ctx)

        }
    })

    await driver.destroy()
    return reply

}
